apiVersion: v1
kind: ConfigMap
metadata:
  name: parity-config
data:
  parity.toml: |
    [parity]
    # Parity continously syncs the chain
    mode = "active"
    # Stable
    release_track = "stable"

    # Blockchain and settings will be stored in /data.
    base_path = "/data"

    [network]
    # Parity will sync by downloading latest state first. Node will be operational in couple minutes.
    warp = false
    # Parity will try to maintain connection to at least 250 peers.
    min_peers = 250
    # Parity will maintain at most 300 peers.
    max_peers = 300

    [rpc]
    #  JSON-RPC will be listening for connections on IP all.
    interface = "all"
    # Only selected APIs will be exposed over this interface.
    apis = ["eth", "pubsub", "net", "parity", "private", "parity_pubsub", "traces", "rpc", "shh", "shh_pubsub", "web3"]
    # Threads for handling incoming connections for HTTP JSON-RPC server.
    server_threads = 6
    # Turn on additional processing threads for JSON-RPC servers (all transports). Setting this to a non-zero value allows parallel execution of cpu-heavy queries.
    processing_threads = 7

    [websockets]
    # UI won't work and WebSockets server will be not available.
    disable = true

    [footprint]
    # Compute and Store tracing data. (Enables trace_* APIs).
    tracing = "on"
    # Increase performance on SSD.
    db_compaction = "ssd"
    # Keep all state trie data. No pruning.
    pruning = "archive"
    # Number of threads will vary depending on the workload. Not guaranteed to be faster.
    scale_verifiers = true
    # Will keep up to 1000MB data in Database cache.
    cache_size_db = 1000

    [snapshots]
    disable_periodic = false

    [misc]
    # Logging pattern (`<module>=<level>`, e.g. `own_tx=trace`).
    logging = "info"
    log_file = "/data/parity.log"
    color = true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scripts
data:
  check_node_health.sh: |
    set -exo pipefail # -e exits on error, and -o (for option) pipefail exits on command pipe failures.

    usage() { echo "Usage: $0 <rpc_endpoint> <max_lag_in_seconds> <last_synced_block_file>]" 1>&2; exit 1; }

    rpc_endpoint="$1"
    max_lag_in_seconds="$2"
    last_synced_block_file="$3"

    if [ -z "${rpc_endpoint}" ] || [ -z "${max_lag_in_seconds}" ] || [ -z "${last_synced_block_file}" ]; then
        usage
    fi

    block_number_request='{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}'
    block_number_response=$(curl -H 'Content-Type: application/json' -X POST --data "$block_number_request" ${rpc_endpoint})

    block_number_hex=$(echo "$block_number_response" | jq -r '.result')

    if [ -z "${block_number_hex}" ] || [ "${block_number_hex}" == "null" ]; then
        echo "Block number returned by the node is empty or null"
        exit 1
    fi

    if [ ! -f ${last_synced_block_file} ]; then
        old_block_number_hex="";
    else
        old_block_number_hex=$(cat ${last_synced_block_file});
    fi;

    if [ "${block_number_hex}" != "${old_block_number_hex}" ]; then
      mkdir -p $(dirname "${last_synced_block_file}")
      echo ${block_number_hex} > ${last_synced_block_file}
    fi

    file_age=$(($(date +%s) - $(date -r ${last_synced_block_file} +%s)));
    max_age=${max_lag_in_seconds};
    echo "${last_synced_block_file} age is $file_age seconds. Max healthy age is $max_age seconds";
    if [ ${file_age} -lt ${max_age} ]; then exit 0; else exit 1; fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: eth-ss
spec:
  serviceName: "eth-ss-1"
  replicas: 1 # by default is 1
  template:
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: failure-domain.beta.kubernetes.io/zone
                operator: In
                values:
                - us-central1-b
      terminationGracePeriodSeconds: 10
      containers:
      - name: parity
        image: gcr.io/crypto-etl-clients/parity:v2.4.6
        args: ["--config=/config/parity.toml"]
        resources:
          requests:
            cpu: "2800m" 
            memory: "10000Mi"
          limits:
            cpu: "3000m" 
            memory: "12000Mi"
        ports:
        - containerPort: 8545
          name: web-socket
        - containerPort: 8546
          name: jsonrpc
        - containerPort: 30303
          protocol: UDP
        volumeMounts:
        - name: parity-config
          mountPath: /config
        - name: scripts
          mountPath: /scripts
        - name: eth-mount
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - /scripts/check_node_health.sh
            - http://127.0.0.1:8545
            - "300"
            - last_synced_block.txt
          initialDelaySeconds: 300
          periodSeconds: 300
          timeoutSeconds: 10
          failureThreshold: 2
      initContainers:
      - name: setup
        image: busybox
        command: ["sh", "-c", "chown -R 1000:1000 /data"]
        volumeMounts:
        - name: eth-mount
          mountPath: /data
      volumes:
        - name: parity-config
          configMap:
            name: parity-config
        - name: scripts
          configMap:
            name: scripts
        - name: eth-mount
          persistentVolumeClaim:
            claimName: eth-regional-pvc
